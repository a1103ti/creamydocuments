==============
Creamyの規約
==============

私たちは「設定より規約」（convention over configuration）という考え方に賛成です。Creamyでは、いくつかの規程に従うだけです。規約に従うと自由に使える機能が増えますし、設定ファイルを調べまわってメンテナンスするという悪夢からも開放されます。規約によって開発が統一感を持つため、開発者が加わってすぐに手伝うということがやりやすくなります。

Creamyの規約はweb開発経験者にとって、なじみ易い規約になっています。


ファイルとクラス名の規約
======================================

Creamyではモデル、コントローラ、ビューに対応するクラスがあり、
特にコントローラとビューに関しては命名規約によってその関連が表されています。
ただし、その命名規約は非常にシンプルです。
controllers.XXXControllerクラスに対応するのは、views.XXXパッケージ以下のファイルとなり、
views.XXX以下のYYY.vm.fxmlとYYY.javaはXXXControllerのYYYメソッドと対応します。


モデルとRDBの規約
======================================

Creamyでは、ORMとしてEBeanを採用しています。
そのため、EBeanの規約に従うことで、RDBとの強力な連携が可能となります。


命名規約
--------------

EBeanの命名規約は非常にシンプルです。
RDBのテーブル名とクラス名、テーブルの列名とフィールド変数名が対応します。
またその際、sampleTableクラスはsample_tableテーブル、sampleFieldはsample_filed列のように複合語はキャメルケースとアンダースコア区切りに対応します。


アノテーション
---------------
	EBeanでは様々なアノテーションを利用することで、RDB上のテーブルの構成を表現します。
	また、アノテーション等を設定したクラスを元にRDBを自動で構成することも可能です。
	以下、代表的なアノテーションを挙げます。
	
	- @Entity : クラスに付与され、RDBのテーブルを表すクラスであることを示します。
	- @Id : フィールドに付与され、RDBテーブルの主キーとなることを示します。
	- @NotNull : フィールドに付与され、NotNull制約があることを示します。
	- @CreatedTimestamp : フィールドに付与され、作成日時を管理するフィールドであることを示します。
	- @Version :  フィールドに付与され、更新日時を管理するフィールドであることを示します。
	- @ManyToOne : RDBでの親子関係を示します。子クラス側のフィールドに付与され、多対１を表します。
	- @JoinColumn(name="parent_id") : 子クラス側のフィールドに付与され、関連を持つカラムを指定します。
	- @OneToMany(cascade=CascadeType, mappedBy="parent") : RDBでの親子関係を示します。親クラス側のフィールドに付与され、１対多を表します。子クラスの@ManyToOneとの整合性を取る必要があります。

詳細はEBeanサイトを参照してください。
http://www.avaje.org/

コントローラの規約
======================================
Creamyでは、コントローラメソッドの呼び出しをPathに対するリクエストという形で
行います。
Pathは/コントローラ名/メソッド名/パラメータ1/パラメータ2...という形で表されます。
この際、パラメータの数や順序はメソッド名に対応するメソッドのシグネチャと整合している必要があります。
また、リクエストが正常に発行され、コントローラのメソッドが呼び出された場合、
メソッド内で別のPathにリダイレクト（フォワード）するなどしなければ、
そのメソッド名に対応するViewが表示されます。


ビューの規約
======================================
ビューに関する規約は非常にシンプルです。
Ceamyでは、ビューはFXMLとActivityクラスの組み合わせから成りますが、
List.vm.fxmlとList.javaの様に拡張子のみが異なるファイルが
同じディレクトリに存在していれば良いだけです。
